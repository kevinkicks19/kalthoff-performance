---
import fs from 'fs';
import path from 'path';
import Layout from '../layouts/Layout.astro';

interface Testimonial {
    testimonial: string;
    name: string;
    position: string;
    organization: string;
}

// Parse testimonials directly in this file to avoid touching the homepage slider
async function getAllTestimonials(): Promise<Testimonial[]> {
    try {
        const csvPath = path.join(process.cwd(), 'public', 'docs', 'Testimonials_JSON.csv');
        const fileContent = fs.readFileSync(csvPath, 'utf-8');
        const lines = fileContent.split('\n').slice(1); // Skip header row
        const testimonials: Testimonial[] = [];
        const seenNames = new Set<string>();

        for (const line of lines) {
            if (!line.trim()) continue;

            // Split by comma, but handle cases where commas are inside quotes
            const parts: string[] = [];
            let currentPart = '';
            let insideQuotes = false;

            for (let i = 0; i < line.length; i++) {
                const char = line[i];
                if (char === '"') {
                    insideQuotes = !insideQuotes;
                } else if (char === ',' && !insideQuotes) {
                    parts.push(currentPart.trim());
                    currentPart = '';
                } else {
                    currentPart += char;
                }
            }
            parts.push(currentPart.trim());

            // Clean up quotes from parts
            const [testimonial, name, position, organization] = parts.map(part => 
                part.replace(/^"/, '').replace(/"$/, '').trim()
            );

            // Skip if missing required fields or invalid name
            if (!testimonial || !name || name === 'Sacrifice') {
                continue;
            }

            // Skip duplicates
            if (seenNames.has(name)) {
                continue;
            }

            seenNames.add(name);
            testimonials.push({
                testimonial,
                name,
                position: position || '',
                organization: organization || ''
            });
        }

        return testimonials;
    } catch (error) {
        console.error('Error parsing testimonials:', error);
        return [];
    }
}

const allTestimonials = await getAllTestimonials();
// Get a random testimonial
const randomIndex = Math.floor(Math.random() * allTestimonials.length);
const testimonial = allTestimonials[randomIndex];
---

<Layout title="Testimonials | Kalthoff Performance">
    <main class="container mx-auto px-4 py-16 bg-black min-h-screen">
        <div class="flex flex-col md:flex-row items-center justify-center gap-8 mb-16">
            <div class="w-full md:w-1/3">
                <img 
                    src="/images/kalthoffGym.png" 
                    alt="Kalthoff Performance Gym" 
                    class="w-full h-64 object-cover rounded-lg shadow-lg"
                />
            </div>
            <h1 class="text-4xl md:text-5xl font-bebas text-center text-white">What Our Athletes Say</h1>
            <div class="w-full md:w-1/3">
                <img 
                    src="/images/CNWST/ce983ba1-ac33-49ae-8b88-8467d153ac9b.jpg" 
                    alt="Zach Kalthoff working with athletes" 
                    class="w-full h-64 object-cover rounded-lg shadow-lg"
                />
            </div>
        </div>
        
        <div class="max-w-3xl mx-auto">
            <div class="bg-gray-900 rounded-lg shadow-md p-8 hover:shadow-lg transition-shadow duration-300">
                <blockquote class="relative">
                    <div class="quote-mark absolute -left-2 -top-4 text-6xl font-serif opacity-10 text-white">"</div>
                    <div class="testimonial-content relative">
                        <p class="text-gray-200 italic mb-6 relative z-10">{testimonial.testimonial}</p>
                    </div>
                    <footer class="mt-6 border-t border-gray-700 pt-4">
                        <cite class="font-bebas text-xl block not-italic text-white">{testimonial.name}</cite>
                        <p class="text-gray-400 text-sm">
                            {testimonial.position && testimonial.organization 
                                ? `${testimonial.position}, ${testimonial.organization}`
                                : testimonial.position || testimonial.organization}
                        </p>
                    </footer>
                </blockquote>
            </div>

            <div class="mt-8 text-center">
                <button 
                    onclick="window.location.reload()"
                    class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors duration-300"
                >
                    Read Another Testimonial
                </button>
            </div>
        </div>
    </main>

    <style>
        .testimonial-content {
            font-size: 1.1rem;
            line-height: 1.6;
        }
    </style>
</Layout> 